unit UEditFactRadePal;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics,  Data.DB,
  Controls, Forms, uniGUITypes, uniGUIAbstractClasses,
  uniGUIClasses, uniGUIForm, uniDateTimePicker, uniBasicGrid, uniStringGrid,
  uniEdit, uniMultiItem, uniComboBox, uniDBComboBox, uniDBLookupComboBox,
  uniLabel, uniGroupBox, uniPanel, uniButton, uniGUIBaseClasses;

type
  TFEditFactRadePal = class(TUniForm)
    UniContainerPanel1: TUniContainerPanel;
    PanOps: TUniPanel;
    BtnCancel: TUniButton;
    BtnSave: TUniButton;
    BtnRapport: TUniButton;
    EdRapport: TUniEdit;
    UniPanel1: TUniPanel;
    Group_fact: TUniGroupBox;
    Group_infos: TUniGroupBox;
    Group_rech: TUniGroupBox;
    BtnRechRade: TUniButton;
    edRechArrive: TUniDateTimePicker;
    UniLabel17: TUniLabel;
    DBLRechCons: TUniDBLookupComboBox;
    UniLabel16: TUniLabel;
    DBLRechNavire: TUniDBLookupComboBox;
    UniLabel15: TUniLabel;
    UniLabel6: TUniLabel;
    EdNavire: TUniEdit;
    UniLabel7: TUniLabel;
    EdConsignataire: TUniEdit;
    UniLabel4: TUniLabel;
    Edarrive: TUniEdit;
    UniLabel8: TUniLabel;
    Eddepart: TUniEdit;
    UniLabel5: TUniLabel;
    EdRefInt: TUniEdit;
    EdQte: TUniEdit;
    UniLabel2: TUniLabel;
    EdBase: TUniEdit;
    UniLabel1: TUniLabel;
    EdNbJours: TUniEdit;
    UniLabel9: TUniLabel;
    EdDateEmis: TUniDateTimePicker;
    UniLabel10: TUniLabel;
    UniLabel11: TUniLabel;
    EdNumFact: TUniEdit;
    UniLabel14: TUniLabel;
    DBLConsignataire: TUniDBLookupComboBox;
    EdDateTrans: TUniDateTimePicker;
    UniLabel3: TUniLabel;
    UniLabel12: TUniLabel;
    EdMontFact: TUniFormattedNumberEdit;
    EdDateEch: TUniDateTimePicker;
    UniLabel13: TUniLabel;
    procedure UniFormShow(Sender: TObject);
    procedure BtnSaveClick(Sender: TObject);
    procedure BtnRechRadeClick(Sender: TObject);
    procedure BtnCancelClick(Sender: TObject);
  private
    { Private declarations }
    procedure loaddata ;
  public
    { Public declarations }
     var
    id_fact, imma_fact, id_rade, ref, num_port, user_create, user_control, user_valid, navire, consignataire,  arrive, depart : string;
    FmContext : string;
    EditContext : string;
    validate_filter , fact_filter, rade_filter , query:string ;

    procedure ClearData;
  end;

function FEditFactRadePal: TFEditFactRadePal;

implementation

{$R *.dfm}

uses
  MainModule, uniGUIApplication, UGlobal, ULoadData, USelectRade, UFunction,
  UFactPALEmise;

function FEditFactRadePal: TFEditFactRadePal;
begin
  Result := TFEditFactRadePal(DM.GetFormInstance(TFEditFactRadePal));
end;

procedure TFEditFactRadePal.loaddata;
begin
     id_rade := DM.QCheck.FieldValues['id'];
     EdRefInt.Text := DM.QCheck.FieldValues['ref'];
     EdNavire.Text := DM.QCheck.FieldValues['nom_navire'];
     EdConsignataire.Text := DM.QCheck.FieldValues['nom_consignataire'];
     Edarrive.Text := DM.QCheck.FieldValues['debut'];
     Eddepart.Text := DM.QCheck.FieldValues['fin'];
     EdBase.Text := DM.QCheck.FieldValues['nombre_jour_taux_rade'];
     EdNbJours.Text := DM.QCheck.FieldValues['sejour'];
     DBLConsignataire.KeyValue := DM.QCheck.FieldValues['consignataire'];
end;


procedure TFEditFactRadePal.BtnCancelClick(Sender: TObject);
begin
  close;
end;

procedure TFEditFactRadePal.BtnRechRadeClick(Sender: TObject);
begin
    query := init_query_select_rade + ' AND R.navire=:nav AND R.consignataire=:cons AND R.debut=:debut ';
     with DM.QCheck do
           begin
               close;
               SQL.Clear;
               sql.add(query );
               Parameters.ParamByName('nav').Value:= DBLRechNavire.KeyValue;
               Parameters.ParamByName('cons').Value:= DBLRechCons.KeyValue;
               Parameters.ParamByName('debut').Value:= msqlDateTime(edRechArrive);
               ExecSQL;
               Open;
           end;

     if DM.QCheck.RecordCount = 0 then
          begin
               MessageDlg('Aucune Rade ne correspond á cette Recherche',mtWarning,[mbok]);
               DBLRechNavire.JSInterface.JSCall('focus' ,[]);
               Abort;
          end
     else
        begin
             if DM.QCheck.FieldValues['date_validate'] = null then
               begin
                   MessageDlg('Rade non validée',mtWarning,[mbok]);
                   DBLRechNavire.JSInterface.JSCall('focus' ,[]);
                   Abort;
               end
             else

              if DM.QCheck.FieldValues['facturer_pal'] = 1 then
               begin
                   MessageDlg('Rade deja facturée',mtWarning,[mbok]);
                   DBLRechNavire.JSInterface.JSCall('focus' ,[]);
                   Abort;
               end
             else
              if (DM.QCheck.FieldValues['facturer_pal'] = 0)  then
                begin
                     loaddata;
                end;
        end


end;

procedure TFEditFactRadePal.BtnSaveClick(Sender: TObject);
begin
         //INSERT
  if FmContext = AddContext then
      begin
        if EdNavire.IsBlank then
              begin
                 MessageDlg('Veuillez sélectionner la Rade Port',mtWarning,[mbok]);
                 BtnRechRade.JSInterface.JSCall('focus' ,[]);
                 Abort;
              end
        else

        if EdNumFact.IsBlank then
              begin
                 MessageDlg('Veuillez renseigner le Numéro de la Facture ',mtWarning,[mbok]);
                 EdNumFact.JSInterface.JSCall('focus' ,[]);
                 Abort;
              end
        else

         with  DM.QCheck do
                begin
                     close;
                     SQL.Clear;
                     sql.add('select * from facture_pal where ref_facture_pal=:ref_facture_pal');
                     Parameters.ParamByName('ref_facture_pal').Value:=EdNumFact.text;
                     ExecSQL;
                     Open;
                end;
                if DM.QCheck.RecordCount > 0 then
                     begin
                         MessageDlg('Une Facture posséde dejà ce Numéro ',mtError,[mbok]);
                         EdNumFact.JSInterface.JSCall('focus' ,[]);
                         Abort;
                     end

            else
        if DBLConsignataire.KeyValue = null then
              begin
                 MessageDlg('Veuillez sélectionner le Consignataire',mtWarning,[mbok]);
                 DBLConsignataire.JSInterface.JSCall('focus' ,[]);
                 Abort;
              end
        else

        if EdMontFact.value <0 then
              begin
                 MessageDlg('Veuillez renseigner le Montant de la Facture ',mtWarning,[mbok]);
                 EdMontFact.JSInterface.JSCall('focus' ,[]);
                 Abort;
              end
        else
          if  EdDateEmis.DateTime=0 then
              begin
                 MessageDlg('Veuillez renseigner la Date d''Émission ',mtWarning,[mbok]);
                 EdDateEmis.JSInterface.JSCall('focus' ,[]);
                 Abort;
              end
        else
        if EdDateTrans.DateTime=0 then
              begin
                 MessageDlg('Veuillez renseigner la Date de Transmission ',mtWarning,[mbok]);
                 EdDateTrans.JSInterface.JSCall('focus' ,[]);
                 Abort;
              end
        else
        if EdDateEch.DateTime=0 then
              begin
                 MessageDlg('Veuillez renseigner la Date d''Échéance ',mtWarning,[mbok]);
                 EdDateEch.JSInterface.JSCall('focus' ,[]);
                 Abort;
              end
        else


              begin
                    MessageDlg('Voulez-vous enregister ?', mtConfirmation, mbYesNo,
                          procedure(Sender: TComponent; Res: Integer)
                          begin
                            case Res of
                              mrYes :
                                  begin
                                        with DM.QSave do
                                              begin
                                                  SQL.Text := ('INSERT INTO facture_pal (rade_facture_pal, ref_facture_pal, consignataire_facture_pal, montant_facture_pal, date_emise_facture_pal, date_trans_facture_pal, date_ech_facture_pal, type_facture, user_create_facture_pal )'#13+
                                                          ' Values (:rade, :ref, :consignataire, :montant, :emis, :trans, :echeance, :type_facture, :user_create)');
                                                  Parameters.ParamByName('rade').Value:= id_rade;
                                                  Parameters.ParamByName('ref').Value:= EdNumFact.Text;
                                                  Parameters.ParamByName('consignataire').Value:= DBLConsignataire.KeyValue;
                                                  Parameters.ParamByName('montant').Value:= (FormatCurr('0.00#', EdMontFact.Value)).Replace(',', '.');
                                                  Parameters.ParamByName('emis').Value:= msqlDateTime(EdDateEmis);
                                                  Parameters.ParamByName('trans').Value:=msqlDateTime(EdDateTrans);
                                                  Parameters.ParamByName('echeance').Value:= msqlDateTime(EdDateEch);
                                                  Parameters.ParamByName('type_facture').Value:= DM.DQ_DBL_TypeFact.FieldValues['id_type_fact'];
                                                  Parameters.ParamByName('user_create').Value:= UserId;
                                                  ExecSQL;
                                              end;

                                              with DM.QUpdate do
                                                begin
                                                    SQL.Text := ('UPDATE rade SET facturer_pal=:facturer_pal WHERE id=:id');
                                                    Parameters.ParamByName('id').Value:= id_rade;
                                                    Parameters.ParamByName('facturer_pal').Value:= 1;
                                                    ExecSQL;
                                                end;

                                                 ClearData;

                                                 with DM.QMax  do
                                                   begin
                                                       close;
                                                       SQL.Clear;
                                                        SQL.Add('select max(id_factures_pal) from facture_pal');
                                                        ExecSQL;
                                                       Open;
                                                   end;

                                           MessageDlg('Enregistrement effectuée',mtConfirmation,[mbok]);
                                           FFactPalEmise.ShowData;
                                           DM.DQ_Grid_FactPal.Locate('id_factures_pal',dm.QMax.Fields[0].AsString,[loCaseInsensitive] );


                                end
                            end ;
                          end
                        );
              end;

      end

      else

   //  //UPDATE
      if FmContext = UpdateContext then
          begin
            if EdNavire.IsBlank then
              begin
                 MessageDlg('Veuillez sélectionner une Escale',mtWarning,[mbok]);
                 BtnRechRade.JSInterface.JSCall('focus' ,[]);
                 Abort;
              end;


            if EdNumFact.IsBlank then
              begin
                 MessageDlg('Veuillez renseigner le Numéro Facture',mtWarning,[mbok]);
                 EdNumFact.JSInterface.JSCall('focus' ,[]);
                 Abort;
              end;


           if (EdNumFact.Text <> imma_fact) then
               begin
                   with  DM.QCheck do
                      begin
                           close;
                           SQL.Clear;
                           sql.add('select * from facture_pal where ref_facture_pal=:ref');
                           Parameters.ParamByName('ref').Value:=EdNumFact.text;
                           ExecSQL;
                           Open;
                      end;
                      if DM.QCheck.RecordCount > 0 then
                           begin
                               MessageDlg('Une Facture posséde dejà ce Numéro ',mtError,[mbok]);
                               EdNumFact.JSInterface.JSCall('focus' ,[]);
                               Abort;
                           end
               end ;

             if DBLConsignataire.IsBlank then
                  begin
                     MessageDlg('Veuillez sélectionner le Consignataire',mtWarning,[mbok]);
                     DBLConsignataire.JSInterface.JSCall('focus' ,[]);
                     Abort;
                  end    ;

              if EdMontFact.Value = 0 then
              begin
                 MessageDlg('Veuillez renseigner le Montant Facture',mtWarning,[mbok]);
                 EdMontFact.JSInterface.JSCall('focus' ,[]);
                 Abort;
              end;



            if EdDateEmis.IsBlank then
                  begin
                     MessageDlg('Veuillez renseigner la Date d''émission',mtWarning,[mbok]);
                     EdDateEmis.JSInterface.JSCall('focus' ,[]);
                     Abort;
                  end;

            if EdDateTrans.IsBlank then
                  begin
                     MessageDlg('Veuillez renseigner la Date de Transmission',mtWarning,[mbok]);
                     EdDateTrans.JSInterface.JSCall('focus' ,[]);
                     Abort;
                  end;

            if EdDateEch.IsBlank then
                  begin
                     MessageDlg('Veuillez renseigner la Date d''Echéance',mtWarning,[mbok]);
                     EdDateEch.JSInterface.JSCall('focus' ,[]);
                     Abort;
                  end;

                  begin
                        MessageDlg('Voulez-vous appliquer les modifications ?', mtConfirmation, mbYesNo,
                              procedure(Sender: TComponent; Res: Integer)
                              begin
                                case Res of
                                  mrYes :
                                      begin
                                            with DM.QSave do
                                                  begin
                                                      SQL.Text := ('UPDATE facture_pal SET  rade_facture_pal=:rade, ref_facture_pal=:ref, consignataire_facture_pal=:consignataire, montant_facture_pal=:montant, '#13+
                                                                   ' date_emise_facture_pal=:emis , date_trans_facture_pal=:trans, date_ech_facture_pal=:echeance WHERE id_factures_pal=:id');
                                                      Parameters.ParamByName('id').Value:= id_fact;
                                                      Parameters.ParamByName('rade').Value:= id_rade;
                                                      Parameters.ParamByName('ref').Value:= EdNumFact.Text;
                                                      Parameters.ParamByName('consignataire').Value:= DBLConsignataire.KeyValue;
                                                       Parameters.ParamByName('montant').Value:= (FormatCurr('0.00#', EdMontFact.Value)).Replace(',', '.');
                                                      Parameters.ParamByName('emis').Value:= msqlDateTime(EdDateEmis);
                                                      Parameters.ParamByName('trans').Value:=msqlDateTime(EdDateTrans);
                                                      Parameters.ParamByName('echeance').Value:= msqlDateTime(EdDateEch);
                                                      ExecSQL;
                                                  end;
                                                 ClearData;

                                               MessageDlg('modification effectuée',mtConfirmation,[mbok]);
                                               FFactPalEmise.ShowData;
                                               DM.DQ_Grid_FactPal.Locate('id_factures_pal',id_fact,[loCaseInsensitive] );
                                               close;

                                    end
                                end ;
                              end
                            );
                  end;

          end


    else
   //CONTROL
  if FmContext = ControlContext then
        begin
          begin
                MessageDlg('Voulez-vous marquer les informations suivantes comme "Controlées" ?', mtConfirmation, mbYesNo,
                      procedure(Sender: TComponent; Res: Integer)
                      begin
                        case Res of
                          mrYes :
                              begin
                                    with DM.QSave do
                                          begin
                                              SQL.Text := ('UPDATE facture_pal SET  rapport_control=:rapport_control, user_control_facture_pal=:user_control, date_control_facture_pal=CURRENT_TIMESTAMP WHERE id_factures_pal=:id');
                                              Parameters.ParamByName('id').Value:= id_fact;
                                              Parameters.ParamByName('rapport_control').Value:= 0;
                                              Parameters.ParamByName('user_control').Value:= UserId;
                                              ExecSQL;
                                          end;
                                         ClearData;

                                       MessageDlg('Control effectuée',mtConfirmation,[mbok]);
                                       FFactPalEmise.ShowData;
                                       DM.DQ_Grid_FactPal.Locate('id_factures_pal',id_fact,[loCaseInsensitive] );
                                       close;

                            end
                        end ;
                      end
                    );
          end;

        end

         else

  //VALIDATION
  if FmContext = ValidatContext then
        begin
          begin
                MessageDlg('Voulez-vous marquer les informations suivantes comme "Validées" ?', mtConfirmation, mbYesNo,
                      procedure(Sender: TComponent; Res: Integer)
                      begin
                        case Res of
                          mrYes :
                              begin
                                    with DM.QSave do
                                          begin
                                              SQL.Text := ('UPDATE facture_pal SET rapport_validate=:rapport_validate,  user_validate_facture_pal=:user_validate, date_validate_facture_pal=CURRENT_TIMESTAMP WHERE id_factures_pal=:id');
                                              Parameters.ParamByName('id').Value:= id_fact;
                                              Parameters.ParamByName('user_validate').Value:= UserId;
                                              Parameters.ParamByName('rapport_validate').Value:= 0;
                                              ExecSQL;
                                          end;
                                         ClearData;
                                       MessageDlg('Control effectuée',mtConfirmation,[mbok]);
                                       FFactPalEmise.ShowData;
                                       DM.DQ_Grid_FactPal.Locate('id_factures_pal',id_fact,[loCaseInsensitive] );
                                       close;
                            end
                        end ;
                      end
                    );
          end;

        end;
end;

procedure TFEditFactRadePal.ClearData;

begin
   //ZONE RECHERCHE
   DBLRechNavire.KeyValue:= null;
   DBLRechCons.KeyValue := null;
   edRechArrive.DateTime := 0;


  EdNavire.Clear;
  EdConsignataire.Clear;
  Edarrive.Clear;
  Eddepart.Clear;
  EdRefInt.Clear;
  EdNbJours.Clear;
  EdBase.Clear;
  EdQte.Clear;

  EdNumFact.Clear;
  DBLConsignataire.KeyValue := null;
  EdMontFact.Clear;
  EdDateEmis.DateTime := 0;
  EdDateTrans.DateTime := 0;
  EdDateEch.DateTime := 0;
end;

procedure TFEditFactRadePal.UniFormShow(Sender: TObject);
begin
    if FmContext = AddContext then
      begin
        ClearData;
      end;
    LoadDBLConsignataire;
    LoadDBLNavire;
    LoadDBLTypeFactRade;

     if ((FmContext=ControlContext) or (FmContext=ValidatContext)) then
    begin
      BtnRapport.Visible := True;
      EdRapport.Visible := True;
    end;
end;

end.
