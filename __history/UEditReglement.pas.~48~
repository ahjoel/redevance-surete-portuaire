unit UEditReglement;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics,
  Controls, Forms, uniGUITypes, uniGUIAbstractClasses,
  uniGUIClasses, uniGUIForm, uniEdit, uniMultiItem, uniComboBox, uniDBComboBox,
  uniDBLookupComboBox, uniLabel, uniDateTimePicker, uniGroupBox, uniButton,
  uniPanel, uniGUIBaseClasses;

type
  TFEditReglement = class(TUniForm)
    UniContainerPanel1: TUniContainerPanel;
    UniPanel1: TUniPanel;
    Group_reg: TUniGroupBox;
    UniLabel11: TUniLabel;
    UniLabel14: TUniLabel;
    DBLConsignataire: TUniDBLookupComboBox;
    UniLabel12: TUniLabel;
    EdDateReg: TUniDateTimePicker;
    Group_infos: TUniGroupBox;
    lbfact: TUniLabel;
    EdFacture: TUniEdit;
    UniLabel7: TUniLabel;
    EdConsignataire: TUniEdit;
    UniLabel4: TUniLabel;
    EdEmmissionFact: TUniEdit;
    UniLabel5: TUniLabel;
    EdEcheanceFact: TUniEdit;
    UniLabel1: TUniLabel;
    EdTypeFact: TUniEdit;
    UniLabel9: TUniLabel;
    Group_rech: TUniGroupBox;
    BtnRechFact: TUniButton;
    edRechDateEm: TUniDateTimePicker;
    UniLabel17: TUniLabel;
    UniLabel15: TUniLabel;
    EdRechNumFact: TUniEdit;
    EdReg: TUniFormattedNumberEdit;
    PanOps: TUniPanel;
    BtnCancel: TUniButton;
    BtnSave: TUniButton;
    BtnRapport: TUniButton;
    EdRapport: TUniEdit;
    UniLabel2: TUniLabel;
    EdMontReg: TUniEdit;
    EdMontantFact: TUniFormattedNumberEdit;
    EdMontSolde: TUniEdit;
    UniLabel3: TUniLabel;
    procedure UniFormShow(Sender: TObject);
    procedure BtnRechFactClick(Sender: TObject);
    procedure BtnSaveClick(Sender: TObject);
  private
    { Private declarations }
    procedure loaddata ;
  public
    { Public declarations }
     var
    id_fact, imma_fact,  navire, consignataire,  date_em, date_ech : string;
    FmContext : string;
    EditContext : string;

    validate_filter , fact_filter, rade_filter , query:string ;

    procedure ClearData;
  end;

function FEditReglement: TFEditReglement;

implementation

{$R *.dfm}

uses
  MainModule, uniGUIApplication, ULoadData, UGlobal, UFunction;

function FEditReglement: TFEditReglement;
begin
  Result := TFEditReglement(DM.GetFormInstance(TFEditReglement));
end;

procedure TFEditReglement.loaddata ;
begin
     id_fact := DM.QCheck.FieldValues['id_factures_pal'];
     EdFacture.Text := DM.QCheck.FieldValues['ref_fact'];
     EdConsignataire.Text := DM.QCheck.FieldValues['cons_fact'];
     EdEmmissionFact.Text := DM.QCheck.FieldValues['date_emise_facture_pal'];
     EdEcheanceFact.Text := DM.QCheck.FieldValues['date_ech_facture_pal'];
     EdTypeFact.Text := DM.QCheck.FieldValues['code_type_fact'];
     EdMontantFact.Text := DM.QCheck.FieldValues['montant_xof'];
     EdMontReg.Text  := DM.QCheck.FieldValues['mont_regle'];
     EdMontSolde.Text  := DM.QCheck.FieldValues['mont_solde'];
     DBLConsignataire.KeyValue  := DM.QCheck.FieldValues['id_cons_fact'];
end;

procedure TFEditReglement.BtnRechFactClick(Sender: TObject);
begin
    query := init_query_select_fact + ' AND L.ref_facture_pal=:ref_fact AND L.date_emise_facture_pal=:date_em ' + 'GROUP BY L.id_factures_pal';
     with DM.QCheck do
           begin
               close;
               SQL.Clear;
               sql.add(query );
               Parameters.ParamByName('ref_fact').Value:= EdRechNumFact.Text;
               Parameters.ParamByName('date_em').Value:= msqlDateTime(edRechDateEm);
               ExecSQL;
               Open;
           end;

     if DM.QCheck.RecordCount = 0 then
          begin
               MessageDlg('Aucune Facture ne correspond á cette Recherche',mtWarning,[mbok]);
               EdRechNumFact.JSInterface.JSCall('focus' ,[]);
               Abort;
          end
     else
        begin
             if DM.QCheck.FieldValues['validation'] = '' then
               begin
                   MessageDlg('Facture non validée',mtWarning,[mbok]);
                   EdRechNumFact.JSInterface.JSCall('focus' ,[]);
                   Abort;
               end
             else

              if DM.QCheck.FieldValues['mont_solde'] = DM.QCheck.FieldValues['montant_xof'] then
               begin
                   MessageDlg('Facture deja Réglée',mtWarning,[mbok]);
                   EdRechNumFact.JSInterface.JSCall('focus' ,[]);
                   Abort;
               end
               else
              if DM.QCheck.FieldValues['mont_solde'] < DM.QCheck.FieldValues['montant_xof']  then
                begin
                     loaddata;
                end;
        end

end;

procedure TFEditReglement.BtnSaveClick(Sender: TObject);
begin
  //INSERT
  if FmContext = AddContext then
      begin

            if EdFacture.IsBlank then
              begin
                 MessageDlg('Veuillez sélectionner une Facture',mtWarning,[mbok]);
                 BtnRechFact.JSInterface.JSCall('focus' ,[]);
                 Abort;
              end
        else

        if EdReg.IsBlank then
              begin
                 MessageDlg('Veuillez renseigner le Montant ',mtWarning,[mbok]);
                 EdReg.JSInterface.JSCall('focus' ,[]);
                 Abort;
              end
        else

          if  EdDateReg.DateTime=0 then
              begin
                 MessageDlg('Veuillez renseigner la Date du Réglement ',mtWarning,[mbok]);
                 EdDateReg.JSInterface.JSCall('focus' ,[]);
                 Abort;
              end
        else
        if DBLConsignataire.KeyValue = null then
              begin
                 MessageDlg('Veuillez sélectionner le Consignataire',mtWarning,[mbok]);
                 DBLConsignataire.JSInterface.JSCall('focus' ,[]);
                 Abort;
              end
        else

              begin
                    MessageDlg('Voulez-vous enregister ?', mtConfirmation, mbYesNo,
                       procedure(Sender: TComponent; Res: Integer)
                          begin
                            case Res of
                              mrYes :
                                  begin
                                        with DM.QSave do
                                              begin

                                                  SQL.Text := ('INSERT INTO reglement (facture_regle, montant_regle, date_regle, consignataire_regle, user_create_regle )'#13+
                                                          ' Values (:facture, :montant, :date, :consignataire, :user_create)');
                                                  Parameters.ParamByName('facture').Value:= id_fact;
                                                  Parameters.ParamByName('montant').Value:= EdReg.Text;
                                                  Parameters.ParamByName('date').Value:= msqlDateTime(EdDateReg);
                                                  Parameters.ParamByName('consignataire').Value:= DBLConsignataire.KeyValue;
                                                  Parameters.ParamByName('user_create').Value:= UserId;
                                                  ExecSQL;
                                              end;

                                              with DM.QUpdate do
                                                begin
                                                    SQL.Text := ('UPDATE escale SET facturer_pal=:facturer_pal WHERE id=:id');
                                                    Parameters.ParamByName('id').Value:= id_esc;
                                                    Parameters.ParamByName('facturer_pal').Value:= 1;
                                                    ExecSQL;
                                                end;

                                                 ClearData;

                                                 with DM.QMax  do
                                                   begin
                                                       close;
                                                       SQL.Clear;
                                                        SQL.Add('select max(id_factures_pal) from facture_pal');
                                                        ExecSQL;
                                                       Open;
                                                   end;

                                           MessageDlg('Enregistrement effectué',mtConfirmation,[mbok]);
                                           FFactPalEmise.ShowData;
                                           DM.DQ_Grid_FactPal.Locate('id_factures_pal',dm.QMax.Fields[0].AsString,[loCaseInsensitive] );


                                end
                            end ;
                          end
                        );
              end;

      end

    else


  //  //UPDATE
      if FmContext = UpdateContext then
          begin
            if EdNavire.IsBlank then
              begin
                 MessageDlg('Veuillez sélectionner une Escale',mtWarning,[mbok]);
                 BtnRechEscale.JSInterface.JSCall('focus' ,[]);
                 Abort;
              end;


            if EdNumFact.IsBlank then
              begin
                 MessageDlg('Veuillez renseigner le Numéro Facture',mtWarning,[mbok]);
                 EdNumFact.JSInterface.JSCall('focus' ,[]);
                 Abort;
              end;


           if (EdNumFact.Text <> imma_fact) then
               begin
                   with  DM.QCheck do
                      begin
                           close;
                           SQL.Clear;
                           sql.add('select * from facture_pal where ref_facture_pal=:ref');
                           Parameters.ParamByName('ref').Value:=EdNumFact.text;
                           ExecSQL;
                           Open;
                      end;
                      if DM.QCheck.RecordCount > 0 then
                           begin
                               MessageDlg('Une Facture posséde dejà ce Numéro ',mtError,[mbok]);
                               EdNumFact.JSInterface.JSCall('focus' ,[]);
                               Abort;
                           end
               end ;

             if DBLConsignataire.IsBlank then
                  begin
                     MessageDlg('Veuillez sélectionner le Consignataire',mtWarning,[mbok]);
                     DBLConsignataire.JSInterface.JSCall('focus' ,[]);
                     Abort;
                  end    ;

              if EdMontFact.Value = 0 then
              begin
                 MessageDlg('Veuillez renseigner le Montant Facture',mtWarning,[mbok]);
                 EdMontFact.JSInterface.JSCall('focus' ,[]);
                 Abort;
              end;

               if EdComplement.IsBlank then
              begin
                 MessageDlg('Veuillez renseigner le complement Facture',mtWarning,[mbok]);
                 EdComplement.JSInterface.JSCall('focus' ,[]);
                 Abort;
              end;

            if DBLTypeFact.KeyValue = null then
                  begin
                     MessageDlg('Veuillez sélectionner le type de Facture',mtWarning,[mbok]);
                     DBLTypeFact.JSInterface.JSCall('focus' ,[]);
                     Abort;
                  end;


            if EdDateEmis.IsBlank then
                  begin
                     MessageDlg('Veuillez renseigner la Date d''émission',mtWarning,[mbok]);
                     EdDateEmis.JSInterface.JSCall('focus' ,[]);
                     Abort;
                  end;

            if EdDateTrans.IsBlank then
                  begin
                     MessageDlg('Veuillez renseigner la Date de Transmission',mtWarning,[mbok]);
                     EdDateTrans.JSInterface.JSCall('focus' ,[]);
                     Abort;
                  end;

            if EdDateEch.IsBlank then
                  begin
                     MessageDlg('Veuillez renseigner la Date d''Echéance',mtWarning,[mbok]);
                     EdDateEch.JSInterface.JSCall('focus' ,[]);
                     Abort;
                  end;

                  begin
                        MessageDlg('Voulez-vous appliquer les modifications ?', mtConfirmation, mbYesNo,
                              procedure(Sender: TComponent; Res: Integer)
                              begin
                                case Res of
                                  mrYes :
                                      begin
                                            with DM.QSave do
                                                  begin
                                                      SQL.Text := ('UPDATE facture_pal SET  escale_facture_pal=:escale, ref_facture_pal=:ref, consignataire_facture_pal=:consignataire, montant_facture_pal=:montant, montant_complement_facture_pal=:complement, '#13+
                                                                  ' date_emise_facture_pal=:emis , date_trans_facture_pal=:trans, date_ech_facture_pal=:echeance, type_facture=:type WHERE id_factures_pal=:id');
                                                  Parameters.ParamByName('id').Value:= id_fact;
                                                  Parameters.ParamByName('escale').Value:= id_esc;
                                                  Parameters.ParamByName('ref').Value:= EdNumFact.Text;
                                                  Parameters.ParamByName('consignataire').Value:= DBLConsignataire.KeyValue;
                                                  Parameters.ParamByName('montant').Value:= (FormatCurr('0.00#', EdMontFact.Value)).Replace(',', '.');
                                                  Parameters.ParamByName('complement').Value:= FormatCurr('0.00#', EdComplement.Value).Replace(',', '.');
                                                  Parameters.ParamByName('emis').Value:= msqlDateTime(EdDateEmis);
                                                  Parameters.ParamByName('trans').Value:=msqlDateTime(EdDateTrans);
                                                  Parameters.ParamByName('echeance').Value:= msqlDateTime(EdDateEch);
                                                  Parameters.ParamByName('type').Value:= DBLTypeFact.KeyValue;
                                                  ExecSQL;
                                                  end;
                                                 ClearData;

                                               MessageDlg('modification effectuée',mtConfirmation,[mbok]);
                                               FFactPalEmise.ShowData;
                                               DM.DQ_Grid_FactPal.Locate('id_factures_pal',id_fact,[loCaseInsensitive] );
                                               close;

                                    end
                                end ;
                              end
                            );
                  end;

          end
  else


    //CONTROL
  if FmContext = ControlContext then
        begin
          begin
                MessageDlg('Voulez-vous marquer les informations suivantes comme "Controlées" ?', mtConfirmation, mbYesNo,
                      procedure(Sender: TComponent; Res: Integer)
                      begin
                        case Res of
                          mrYes :
                              begin
                                    with DM.QSave do
                                          begin
                                              SQL.Text := ('UPDATE facture_pal SET  rapport_control=:rapport_control, user_control_facture_pal=:user_control, date_control_facture_pal=CURRENT_TIMESTAMP WHERE id_factures_pal=:id');
                                              Parameters.ParamByName('id').Value:= id_fact;
                                              Parameters.ParamByName('rapport_control').Value:= 0;
                                              Parameters.ParamByName('user_control').Value:= UserId;
                                              ExecSQL;
                                          end;
                                         ClearData;

                                       MessageDlg('Control effectuée',mtConfirmation,[mbok]);
                                       FFactPalEmise.ShowData;
                                       DM.DQ_Grid_FactPal.Locate('id_factures_pal',id_fact,[loCaseInsensitive] );
                                       close;

                            end
                        end ;
                      end
                    );
          end;

        end

         else

  //VALIDATION
  if FmContext = ValidatContext then
        begin
          begin
                MessageDlg('Voulez-vous marquer les informations suivantes comme "Validées" ?', mtConfirmation, mbYesNo,
                      procedure(Sender: TComponent; Res: Integer)
                      begin
                        case Res of
                          mrYes :
                              begin
                                    with DM.QSave do
                                          begin
                                              SQL.Text := ('UPDATE facture_pal SET rapport_validate=:rapport_validate,  user_validate_facture_pal=:user_validate, date_validate_facture_pal=CURRENT_TIMESTAMP WHERE id_factures_pal=:id');
                                              Parameters.ParamByName('id').Value:= id_fact;
                                              Parameters.ParamByName('user_validate').Value:= UserId;
                                              Parameters.ParamByName('rapport_validate').Value:= 0;
                                              ExecSQL;
                                          end;
                                         ClearData;
                                       MessageDlg('Control effectuée',mtConfirmation,[mbok]);
                                       FFactPalEmise.ShowData;
                                       DM.DQ_Grid_FactPal.Locate('id_factures_pal',id_fact,[loCaseInsensitive] );
                                       close;
                            end
                        end ;
                      end
                    );
          end;

        end;

end;

procedure TFEditReglement.ClearData;

begin
   //ZONE RECHERCHE
   EdRechNumFact.Clear;
   edRechDateEm.DateTime := 0;


    EdFacture.Clear;
    EdConsignataire.Clear;
    EdEmmissionFact.Clear;
    EdEcheanceFact.Clear;
    EdTypeFact.Clear;
    EdMontantFact.Clear;

    EdMontantReg.Clear;
    DBLConsignataire.KeyValue := null;
    EdDateReg.DateTime := 0;
end;

procedure TFEditReglement.UniFormShow(Sender: TObject);
begin
    LoadDBLConsignataire;
    if FmContext = AddContext then
      begin
        ClearData;
      end;
    LoadDBLConsignataire;

      if ((FmContext=ControlContext) or (FmContext=ValidatContext)) then
    begin
      BtnRapport.Visible := True;
      EdRapport.Visible := True;
    end;
end;

end.
